{% include 'snippet-name' %}
{% include 'site-nav' %}
{% section 'sectionname-name' %}
{{ 'custom-style.css' | asset_url | stylesheet_tag }}
{{ 'image.jpg' | asset_url | img_tag }}
{{ 'custom.js' | asset_url | script_tag }}
____________________________________________________
To add custom font:
Download ttf file i.e from https://www.wfonts.com/font/verdana
then genrate fontface by upload ttf file to https://transfonter.org/
Then download font zip file from https://transfonter.org/
Then upload its files on website and link the stylesheet.css in header of website.
Then use font family as suggested in demo.

_____________________________________________________________________________________
Shofiy:-
Shopify provides trial account same as squarespace for 14 days.It is only used for shopping purpose. it provide very simple
interface for creating online store(shopping pages). It is mostly designed same as woocommerce of wordpress means the person who
knows the woocommerce can easity handle the settings of shopify.

Addtionaly we can import/export themes and products in it. we can also do a customization in theme files. like we can create
our own template as in wordpress. To customize the files just go to theme customization. then Go to Theme options on top right side.
then select 'edit html/css' and then it will show all the files of theme. To create a new template just click on create a new template
, then it will provide all option like template of page, aritlce, blog etc. then select page and create it. then it will create
ur template page. then Add a new page in dashbaord and select the currently created template for it. we can also add our own
html in newly created template. template code works similariy wordpress.

We can also put the custom css in css.liquid file.

Header and Footer:
To edit Header and footer. we will need to customize the theme.liquid file.

Note:-
theme.liquid file is a file that will run for all pages. we will put  header and footer in theme.liquid file and use the {{ content_for_layout }} in body area of page. 
 {{ content_for_layout }} will fetch the dynamic content of each page. Do'nt forget to add the  {{ content_for_header }} in <head> tag of header. it includes all the 
dynamic code,links etc.

index.liquid file is a file of Home page. we can customize it to customize the Home page. create template for the other pages.
---------------------------
Schema:- Schema is very Very useful feature of Shopify which is used under each section liquid files. it is used to create dynamic theme settings of pages. we can create custom schema, add more options to existing schema as well. We can create particular schema for each page, just we will have to create section liquid file for that page and need to include that file in page template file. The Schema for particular page will be only shown when we will open that page in "Customize" theme option settings. we can create common setting options for each page by calling schema in header or footer file. 
-------------------------------
used Apps:
Auto Currency Switcher (To add the currency switcher on  website, just follow the setting options it will automatically add the currency switcher dropdown on website)
Loyalty, rewards and referrals by LoyaltyLion (To show reward coupons)
Privy - Free email popups with exit intent(Great newsletter popup on website that will be integrated with further to all email CRM like mailchip,icontact,contstantcontact, infusionsoft etc)
Product Reviews(To show the Customer reviews on product page)
_______________________________________________________________________________________
Contact us page:
Put following hidden input fields in contact form template file of shopify to change the destination email and Subject of email.
--------------------------------
<input type="hidden" name="contact[subject]" value"My New subject line" />
<input type="hidden" name="contact[send-to]" value"ankpro29@gmail.com" />
--------------------------------
______________________________________________________________________________
Latest blog posts:
--------------------------------
<div class="bloghomepage inner">
<h2>Latest Posts</h2>
<ul>
{% for article in blogs.news.articles limit: 5 %}
<li>
<h3><a href="{{ article.url }}">{{ article.title }}</a></h3>
<span><img src="{{ article | img_url: 'large' }}"></span>
<p>{{ article.content | strip_html | truncatewords: 50 }}</p>
<p><a href="{{ article.url }}">{{ 'blogs.article.read_more' | t }} &rarr;</a></p>
</li>
{% endfor %}
</ul>
</div>
--------------------------------
________________________________________________________
Navigation:

If we want to add the sub pages under any page then just create a new page and give the name of page in Menu description under which you want 
to add the sub pages. Note put the correct slug in "Handle (what's this?)" field otherwise it would not work. Then all pages added in
that menu will be listed as a sub pages of mentioned page in description.
________________________________________________________________________________________
Pages:
Header and footer is in theme.liquid file
Home is in index.liquid file
create new file for css in assets and link it in theme.liquid file using {{ 'style.css' | asset_url | stylesheet_tag }} function.
collection pages are come from collection.liquid file.
__________________________________________________________________-
Search form:
--------------------------------
<form method="get" action="/search">
    <input type="text" name="q" />
    <input  type="submit" value="Search" />
</form>
--------------------------------
__________________________________________________________________
Schema:
--------------------------------
{% if section.settings.id_text %}
<iframe src="https://www.youtube.com/embed/{{section.settings.id_text}}?autohide=1&auto=1&rel=0&autoplay=1&iv_load_policy=3&modestbranding=1&controls=0&showinfo=0" width="640" height="480" frameborder="0" title="Funny Cat Videos For Kids" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" data-ready="true"></iframe>
{% endif %}

{% schema %}
  {
    "name": "Youtube Video",
    "settings": [
     {
        "type": "text",
        "id": "id_text",
        "label": "ID of Youtube Video",
        "default": "-WqeFWUr2qA"
      }
                ]
  }
{% endschema %}
--------------------------------
______________________________________________________________________________
Section:- Block schema to add multple blocks and fetch them, very useful code.
--------------------------------
{% for block in section.blocks %}
<h2>{{ block.settings.color_variable }}</h2>
<img src="{{ block.settings.image_variable | img_url: '800x' }}"/>
{% endfor %}

{% schema %}
{
    "name": "Color Images",
    "max_blocks": 40,
    "blocks": [
 {
      "type": "image",
      "name": {
        "en": "Image & Color"
      },
      "settings": [
        {
          "type": "image_picker",
          "id": "image_variable",
          "label": {
            "en": "Image"
          }
        },
        {
          "type": "text",
          "id": "color_variable",
          "label": {
            "en": "Color Name"
          }
        }
               ]
 }
         ]
}
{% endschema %}
-----------------------------------------------------------------------------
To get page content by schema setting use following mehtod:


  {% if section.settings.product_tab3 %}
    <div class="dt-sc-tabs-content slideInDown">
      <p>{{ pages[section.settings.product_tab3_page].content }}</p>
    </div>
    {% endif %}
 
     {
        "type": "page",
        "id": "product_tab3_page",
        "label": "Select shipping info page"
      }
______________________________________________________________________________
Narrative theme: How to show all variant images with product image and make them to change the variant automatically on clicking. And show variant images in slider format for mobile view in place of product image.

Product page code:-
..................................
{% comment %}
  The contents of the product.liquid template can be found in /sections/product-template/
{% endcomment %}
<div class="desktopview">
{% for image in product.images %}
    {% for variant in image.variants %}
<img alt="{{ variant.title }}" src="{{ image | img_url: "small" }}" class="desktopimages"/>
{% endfor %}
{% endfor %}
</div> 

{% section 'product-template' %}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script>
$(document).ready(function(){
 var onloading = $('.single-option-selector').val();
 $("#"+onloading).css('background','red');
 $(".dots").click(function(){
    var dotid = $(this).attr("id");
   $('.single-option-selector').val(dotid).trigger('change');
 });
$('.single-option-selector').on('change', function() {
 $('.dots').css('background','white');
     $("#"+this.value).css('background','red');
});
 $(".desktopimages").click(function(){
     var alttext = $(this).attr("alt");
     $('.single-option-selector').val(alttext).trigger('change');
});
 $(".nextis").click(function(){
     var last = $('.dots:last-child').text();
    var currenttext = $('.single-option-selector').val()
     var checknext = $('.single-option-selector>option:selected').next().val();
     if(currenttext==last){}else{ 
       $('.single-option-selector').val(checknext).trigger('change');
     }
});
  $(".previousis").click(function(){
   var first = $('.dots:first-child').text();
    var currenttext = $('.single-option-selector').val()
     var previousis = $('.single-option-selector>option:selected').prev().val();
    if(currenttext==first){}else{ 
     $('.single-option-selector').val(previousis).trigger('change');
       }
});  
});

</script>
<style>
.mydotsare {
    text-align: center;
}
  .dots {
    padding: 5px!important;
    cursor:pointer;
   }
.desktopimages{
   cursor:pointer;
   }
</style>
......................................................
product-template:- Add this code under featured image code: this code will show dots under image under slider that will be work like a slider in mobile view.
......................................................
<span class="previousis" id="previousis">Previous</span> 
 {% unless product.variants.size == 1 and product.options.size == 1 and product.options.first == 'Title' and product.variants.first.title == 'Default Title' %}
    {% for option in product.options_with_values %}
      <div class="mydotsare">
 {% for value in option.values %}
            {% assign safeValue = value | replace: '"', '&quot;' %}
            <span class="dots" id="{{value}}">{{ value }}</span>
          {% endfor %}
        
      </div>
    {% endfor %}
  {% endunless %}  
<span class="nextis" id="nextis">Next</span>
 .........................................
____________________________________________________________________________________
Shopify App: follow this url:-  https://www.shopify.in/partners/blog/17056443-how-to-generate-a-shopify-api-token

Public App:- Shopify public apps are the apps that are hosted in any other cpanel(Not on shopify). They interact with shopify store, create access token and then use that access token to pull and push data. we can create shopify public app on our localhost. 

Following are the steps to create publci app.
Create account in shopify partner website.
Create a new app there, give any name to app and add url of our localhost install file suppose to be http://localhost/app/newapp/install.php
Then add http://localhost/app/newapp/generate_token.php url to Whitelisted redirection URL(s) fields, this url will generate access token.
Then download and paste the sample code of app from above url and paste it in newapp folder of localhost.
Then we need to copy the API key and Secret key of new created app and use them in install and generate_token.php file.

Then go to app in app listing store(make sure the partner account is logged in, otherwise the app will not be listed as it is not published for all), press get, then add shopify store url, then install it, then it will generate access token on http://localhost/app/newapp/generate_token.php page. That is the actual requirement of app. once we got it then We will use this access token to pull and push data to shopify from our localhost.
That's all in shopify app, 
________________________________________________________________________________
creating mini cart with ajax: Put following code in theme.js, create UL tag with class "cartupdating"
......................................................................................................................
 $.getJSON('/cart.js', function(cart) {
    // Update cart count
    theme.cache.$cartCount.text(cart.item_count);
   // $('.cart-count').text(cart.item_count);
  $('.totalmoneyis').text(cart.total_price);
    
  $(".cartupdating").empty();
 
 $.each(cart.items, function(index, cartItem) {
   $(".cartupdating").append('<li><a href="'+cartItem.url+'" class="dropdown-product-image"><img src="'+cartItem.image+'" alt="product image"/></a><p class="restrain-width"><a href="'+cartItem.url+'" class="small">'+cartItem.title+'</a><span class="money">'+(Shopify.formatMoney(cartItem.line_price, "{{ shop.money_format | remove: "'" | remove: '"' }}"))+'</span ><span class="quty">'+cartItem.quantity+' Qty</span></p></li>');
});});
......................................................................................................................
________________________________________________________________________________
script to create products on Shopify by reading csv file from any ftp account: its a running script just need to update accordingly.
...............................................................................................
<?php
//read the file from ftp (using ftp credentials) fttp://username:password@host/next-path-of-file-from-ftp-path
$filename = "ftp://username_of_ftp:password_of_ftp@hostname_of_ftp/testit/test.csv";

$row = 1;
if (($handle = fopen($filename, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
////loop start for each product///////// 	
        $num = count($data);
		//print_r($data);
        echo "<p> $num fields in line $row: <br /></p>\n";
        $row++;
        /*for ($c=0; $c < $num; $c++) {
            echo $data[$c] . "<br />\n";
        }*/
		echo $data[1] . "<br />\n";
 /// update values dynamically as required
$products_array = array(
    "product"=> array(
        "title"=> $data[1],
        "body_html"=> "<strong>Good snowboard!</strong>",
        "vendor"=> "Burton",
        "product_type"=>"Snowboard",
        "variants"=> array(
            array(
                "option1"=> "First",
                "price"=> "10.00",
                "sku"=> "123",
                "inventory_quantity"=> 100,
                "images"=>array( array ("src"=>'http://clarks.scene7.com/is/image/clarks/26103666_A')),    
            ),
            array(
                "option1"=> "Second",
                "price"=> "20.00",
                "sku"=> "124",
                "inventory_quantity"=> 200,
                "images"=>array( array ("src"=>'http://clarks.scene7.com/is/image/clarks/26103666_A')),    
            )
        )
    ),
	
);
echo json_encode($products_array);
echo "<br />";
$url = "https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/products.json";
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json; charset=utf-8'));
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_VERBOSE, 0);
curl_setopt($curl, CURLOPT_HEADER, 1);
curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "POST");
curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($products_array));
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
$response = curl_exec ($curl);
curl_close ($curl);
////loop end for each product///////// 
   }
    fclose($handle);
}

echo "<pre>";
print_r($response); 
?>
...............................................................................................
_______________________________________________________________________________________________________
Fetch products or orders from shopfy:
How to fetch products/orders from shopify using external php script and create their csv files.

Note:- We need to firstly create api key and password to make the url of following format. 
URL = https://apikey:password@storebackendaddress/admin/products.json
To create api key and password, we will have to login into shopify store, then create an app(private app), then grant access to that app for orders, products etc, then when we will save that app, it will provide us api key and password for that app, just copy them and use them for fetching the details of required data as used in following code.
.............................................
<?php
$orderUrl ="https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/products.json";

	// Get cURL resource
	$curl = curl_init();
	// Set some options - we are passing in a useragent too here
	curl_setopt_array($curl, array(
	CURLOPT_RETURNTRANSFER => 1,
	CURLOPT_URL => 'https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/products.json',
	CURLOPT_USERAGENT => 'Codular Sample cURL Request'
	));
	// Send the request & save response to $resp
	$resp = curl_exec($curl);
  $csv = "col1,col2 \n";//Column headers
	$response = json_decode($resp);
		$new=array();
		echo '<pre>';
		//print_r($response);
echo '</pre>';
 foreach($response as $res){
	 echo '<pre>';
	//print_r($res);
	echo '</pre>';
	 foreach($res as $ress){
		 echo '<pre>';
	//print_r($ress);
	echo '</pre>'; 
	echo $ress->id;
	echo $ress->title;

$csv.= $ress->id.','.$ress->title."\n"; //Append data to csv
$file_name = date('Y-m-d H-i-s').'-orders.csv';
$csv_handler = fopen ($file_name,'w');
fwrite ($csv_handler,$csv);
fclose ($csv_handler);
echo 'Data saved to csv file';
	}
	
 }
	exit;
?>
.............................................................................
another example:
........................................................  
<?php
//Fetching shopify orders

$from_unix_time = mktime(0, 0, 0, $month, $day, $year);
$day_before = strtotime("yesterday", $from_unix_time);
$formatted = $days_ago = date('Y-m-d', strtotime('-1 days'));
 /*API Call to Shopify*/
$orderUrl ="https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/orders.json?created_at_min=".$formatted;
  // Get cURL resource
	$curl = curl_init();
	// Set some options - we are passing in a useragent too here
	curl_setopt_array($curl, array(
	CURLOPT_RETURNTRANSFER => 1,
	CURLOPT_URL => 'https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/orders.json?created_at_min='.$formatted,
	CURLOPT_USERAGENT => 'Codular Sample cURL Request'
	));
	// Send the request & save response to $resp
	$resp = curl_exec($curl);

$csv = "Email,Name,Date,Description,Order Ref,Product Search Code,Customer Ref,Amount,Currency,Tags,Merchant Identifier \n";//Column headers
	
	$response = json_decode($resp);
		$new=array();
		echo '<pre>';
	//print_r($response);
echo '</pre>';
 foreach($response as $res){
	echo '<pre>';
	print_r($res);
	echo '</pre>';
	 foreach($res as $ress){
/* echo "<pre>";
print_r($ress->line_items);
echo "</pre>";
*/
$newarr=$ress->line_items;

 foreach($ress as $resss){
 $customer_id = $resss->id;
 $customer_name = $resss->first_name.' '.$resss->last_name;
 
}
/*echo "<pre>";
print_r($newarr);
echo "</pre>";
*/
$a=array();
foreach($newarr as $newrr){
	array_push($a,$newrr->title);
	//echo $tgs.=$newrr->title;	
	//$get_tags .= implode(",",$newrr->title);
	
}
echo $comma_separated = implode(" ", $a);
$val="lorem lorem";

"Email,Name,Date,Description,Order Ref,Product Search Code,Customer Ref,Amount,Currency,Tags,Merchant Identifier \n";
if($ress->shipping_address->country=="United States"){
$csv.= $ress->email.','.$customer_name.','.$ress->created_at.','.$comma_separated.','.$ress->name.','.$comma_separated.','.$customer_id.','.$ress->total_price.','.$ress->currency.','.$ress->tags.','."cycology-clothing-usa"."\n";
}
 //Append data to csv
$file_name = date('m-d-Y').'-orders.csv';

$csv_handler = fopen ($file_name,'w');
fwrite ($csv_handler,$csv);
fclose ($csv_handler);
 }
	
 }
 echo 'Data saved to csvfile.csv';
	exit;
?>
------------------------------------------------------
______________________________________________________________________________________________
Youtube Video
........
<script type="text/javascript">
  var tag = document.createElement('script');
  tag.id = 'iframe-demo';
  tag.src = 'https://www.youtube.com/iframe_api';
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('existing-iframe-example', {
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
    });
  }
  function onPlayerReady(event) {
    document.getElementById('existing-iframe-example').style.borderColor = '#FF6D00';
  }
  function changeBorderColor(playerStatus) {
    var color;
	var display;
	var opacity;
    if (playerStatus == -1) {
      color = "#37474F"; // unstarted = gray
    } else if (playerStatus == 0) {
      color = "#FFFF00"; // ended = yellow
	  display = "none";
	  opacity = "0";
    } else if (playerStatus == 1) {
      color = "#33691E"; // playing = green
	  display = "block";
	  opacity = "1";
    } else if (playerStatus == 2) {
      color = "#DD2C00"; // paused = red
    } else if (playerStatus == 3) {
      color = "#AA00FF"; // buffering = purple
      opacity = "0";
    } else if (playerStatus == 5) {
      color = "#FF6DOO"; // video cued = orange
    }
    if (color) {
      document.getElementById('existing-iframe-example').style.borderColor = color;
	   //document.getElementById('existing-iframe-example').style.display = display;
      
	   document.getElementById('its').style.opacity = opacity;
    }
  }
  function onPlayerStateChange(event) {
    changeBorderColor(event.data);
  }
</script>



<style>
.top iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
.wrapper {
    position: relative;
    padding-bottom: 200%;
    transform: translateY(-35.95%);
}
.video_banner {
    position: relative;
    background-image: url(https://img.youtube.com/vi/-WqeFWUr2qA/sddefault.jpg);
    background-attachment: fixed;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
}
.top {
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    position: relative;
}
</style>
<div class="video_banner">
<div class="top" id="its" style="opacity:0">
    <div class="wrapper">
        <iframe id="existing-iframe-example"
        width="640" height="480"
        src="https://www.youtube.com/embed/-WqeFWUr2qA?enablejsapi=1&loop=1&playlist=-WqeFWUr2qA&autoplay=1&mute=1"
        frameborder="0"
        style="border: solid 4px #37474F"
></iframe>
    </div>
</div>   
   
</div>
.............
______________________________________________________________________________________________________________
