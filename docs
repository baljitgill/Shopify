______________________________________________________________________________
Schema:
--------------------------------
{% if section.settings.id_text %}
<iframe src="https://www.youtube.com/embed/{{section.settings.id_text}}?autohide=1&auto=1&rel=0&autoplay=1&iv_load_policy=3&modestbranding=1&controls=0&showinfo=0" width="640" height="480" frameborder="0" title="Funny Cat Videos For Kids" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" data-ready="true"></iframe>
{% endif %}

{% schema %}
  {
    "name": "Youtube Video",
    "settings": [
     {
        "type": "text",
        "id": "id_text",
        "label": "ID of Youtube Video",
        "default": "-WqeFWUr2qA"
      }
                ]
  }
{% endschema %}
--------------------------------
______________________________________________________________________________
Section:- Block schema to add multple blocks and fetch them, very useful code.
--------------------------------
{% for block in section.blocks %}
<h2>{{ block.settings.color_variable }}</h2>
<img src="{{ block.settings.image_variable | img_url: '800x' }}"/>
{% endfor %}

{% schema %}
{
    "name": "Color Images",
    "max_blocks": 40,
    "blocks": [
 {
      "type": "image",
      "name": {
        "en": "Image & Color"
      },
      "settings": [
        {
          "type": "image_picker",
          "id": "image_variable",
          "label": {
            "en": "Image"
          }
        },
        {
          "type": "text",
          "id": "color_variable",
          "label": {
            "en": "Color Name"
          }
        }
               ]
 }
         ]
}
{% endschema %}
--------------------------------
______________________________________________________________________________
Narrative theme: How to show all variant images with product image and make them to change the variant automatically on clicking. And show variant images in slider format for mobile view in place of product image.

Product page code:-
..................................
{% comment %}
  The contents of the product.liquid template can be found in /sections/product-template/
{% endcomment %}
<div class="desktopview">
{% for image in product.images %}
    {% for variant in image.variants %}
<img alt="{{ variant.title }}" src="{{ image | img_url: "small" }}" class="desktopimages"/>
{% endfor %}
{% endfor %}
</div> 

{% section 'product-template' %}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script>
$(document).ready(function(){
 var onloading = $('.single-option-selector').val();
 $("#"+onloading).css('background','red');
 $(".dots").click(function(){
    var dotid = $(this).attr("id");
   $('.single-option-selector').val(dotid).trigger('change');
 });
$('.single-option-selector').on('change', function() {
 $('.dots').css('background','white');
     $("#"+this.value).css('background','red');
});
 $(".desktopimages").click(function(){
     var alttext = $(this).attr("alt");
     $('.single-option-selector').val(alttext).trigger('change');
});
 $(".nextis").click(function(){
     var last = $('.dots:last-child').text();
    var currenttext = $('.single-option-selector').val()
     var checknext = $('.single-option-selector>option:selected').next().val();
     if(currenttext==last){}else{ 
       $('.single-option-selector').val(checknext).trigger('change');
     }
});
  $(".previousis").click(function(){
   var first = $('.dots:first-child').text();
    var currenttext = $('.single-option-selector').val()
     var previousis = $('.single-option-selector>option:selected').prev().val();
    if(currenttext==first){}else{ 
     $('.single-option-selector').val(previousis).trigger('change');
       }
});  
});

</script>
<style>
.mydotsare {
    text-align: center;
}
  .dots {
    padding: 5px!important;
    cursor:pointer;
   }
.desktopimages{
   cursor:pointer;
   }
</style>
......................................................
product-template:- Add this code under featured image code: this code will show dots under image under slider that will be work like a slider in mobile view.
......................................................
<span class="previousis" id="previousis">Previous</span> 
 {% unless product.variants.size == 1 and product.options.size == 1 and product.options.first == 'Title' and product.variants.first.title == 'Default Title' %}
    {% for option in product.options_with_values %}
      <div class="mydotsare">
 {% for value in option.values %}
            {% assign safeValue = value | replace: '"', '&quot;' %}
            <span class="dots" id="{{value}}">{{ value }}</span>
          {% endfor %}
        
      </div>
    {% endfor %}
  {% endunless %}  
<span class="nextis" id="nextis">Next</span>
 .........................................
____________________________________________________________________________________
Shopify App: follow this url:-  https://www.shopify.in/partners/blog/17056443-how-to-generate-a-shopify-api-token

Public App:- Shopify public apps are the apps that are hosted in any other cpanel(Not on shopify). They interact with shopify store, create access token and then use that access token to pull and push data. we can create shopify public app on our localhost. 

Following are the steps to create publci app.
Create account in shopify partner website.
Create a new app there, give any name to app and add url of our localhost install file suppose to be http://localhost/app/newapp/install.php
Then add http://localhost/app/newapp/generate_token.php url to Whitelisted redirection URL(s) fields, this url will generate access token.
Then download and paste the sample code of app from above url and paste it in newapp folder of localhost.
Then we need to copy the API key and Secret key of new created app and use them in install and generate_token.php file.

Then go to app in app listing store(make sure the partner account is logged in, otherwise the app will not be listed as it is not published for all), press get, then add shopify store url, then install it, then it will generate access token on http://localhost/app/newapp/generate_token.php page. That is the actual requirement of app. once we got it then We will use this access token to pull and push data to shopify from our localhost.
That's all in shopify app, 
________________________________________________________________________________
creating mini cart with ajax: Put following code in theme.js, create UL tag with class "cartupdating"
......................................................................................................................
 $.getJSON('/cart.js', function(cart) {
    // Update cart count
    theme.cache.$cartCount.text(cart.item_count);
   // $('.cart-count').text(cart.item_count);
  $('.totalmoneyis').text(cart.total_price);
    
  $(".cartupdating").empty();
 
 $.each(cart.items, function(index, cartItem) {
   $(".cartupdating").append('<li><a href="'+cartItem.url+'" class="dropdown-product-image"><img src="'+cartItem.image+'" alt="product image"/></a><p class="restrain-width"><a href="'+cartItem.url+'" class="small">'+cartItem.title+'</a><span class="money">'+(Shopify.formatMoney(cartItem.line_price, "{{ shop.money_format | remove: "'" | remove: '"' }}"))+'</span ><span class="quty">'+cartItem.quantity+' Qty</span></p></li>');
});});
......................................................................................................................
________________________________________________________________________________
script to create products on Shopify by reading csv file from any ftp account: its a running script just need to update accordingly.
...............................................................................................
<?php
//read the file from ftp (using ftp credentials) fttp://username:password@host/next-path-of-file-from-ftp-path
$filename = "ftp://username_of_ftp:password_of_ftp@hostname_of_ftp/testit/test.csv";

$row = 1;
if (($handle = fopen($filename, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
////loop start for each product///////// 	
        $num = count($data);
		//print_r($data);
        echo "<p> $num fields in line $row: <br /></p>\n";
        $row++;
        /*for ($c=0; $c < $num; $c++) {
            echo $data[$c] . "<br />\n";
        }*/
		echo $data[1] . "<br />\n";
 /// update values dynamically as required
$products_array = array(
    "product"=> array(
        "title"=> $data[1],
        "body_html"=> "<strong>Good snowboard!</strong>",
        "vendor"=> "Burton",
        "product_type"=>"Snowboard",
        "variants"=> array(
            array(
                "option1"=> "First",
                "price"=> "10.00",
                "sku"=> "123",
                "inventory_quantity"=> 100,
                "images"=>array( array ("src"=>'http://clarks.scene7.com/is/image/clarks/26103666_A')),    
            ),
            array(
                "option1"=> "Second",
                "price"=> "20.00",
                "sku"=> "124",
                "inventory_quantity"=> 200,
                "images"=>array( array ("src"=>'http://clarks.scene7.com/is/image/clarks/26103666_A')),    
            )
        )
    ),
	
);
echo json_encode($products_array);
echo "<br />";
$url = "https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/products.json";
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json; charset=utf-8'));
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_VERBOSE, 0);
curl_setopt($curl, CURLOPT_HEADER, 1);
curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "POST");
curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($products_array));
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
$response = curl_exec ($curl);
curl_close ($curl);
////loop end for each product///////// 
   }
    fclose($handle);
}

echo "<pre>";
print_r($response); 
?>
...............................................................................................
_______________________________________________________________________________________________________
Fetch products or orders from shopfy:
How to fetch products/orders from shopify using external php script and create their csv files.

Note:- We need to firstly create api key and password to make the url of following format. 
URL = https://apikey:password@storebackendaddress/admin/products.json
To create api key and password, we will have to login into shopify store, then create an app(private app), then grant access to that app for orders, products etc, then when we will save that app, it will provide us api key and password for that app, just copy them and use them for fetching the details of required data as used in following code.
.............................................
<?php
$orderUrl ="https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/products.json";

	// Get cURL resource
	$curl = curl_init();
	// Set some options - we are passing in a useragent too here
	curl_setopt_array($curl, array(
	CURLOPT_RETURNTRANSFER => 1,
	CURLOPT_URL => 'https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/products.json',
	CURLOPT_USERAGENT => 'Codular Sample cURL Request'
	));
	// Send the request & save response to $resp
	$resp = curl_exec($curl);
  $csv = "col1,col2 \n";//Column headers
	$response = json_decode($resp);
		$new=array();
		echo '<pre>';
		//print_r($response);
echo '</pre>';
 foreach($response as $res){
	 echo '<pre>';
	//print_r($res);
	echo '</pre>';
	 foreach($res as $ress){
		 echo '<pre>';
	//print_r($ress);
	echo '</pre>'; 
	echo $ress->id;
	echo $ress->title;

$csv.= $ress->id.','.$ress->title."\n"; //Append data to csv
$file_name = date('Y-m-d H-i-s').'-orders.csv';
$csv_handler = fopen ($file_name,'w');
fwrite ($csv_handler,$csv);
fclose ($csv_handler);
echo 'Data saved to csv file';
	}
	
 }
	exit;
?>
.............................................................................
another example:
........................................................  
<?php
//Fetching shopify orders

$from_unix_time = mktime(0, 0, 0, $month, $day, $year);
$day_before = strtotime("yesterday", $from_unix_time);
$formatted = $days_ago = date('Y-m-d', strtotime('-1 days'));
 /*API Call to Shopify*/
$orderUrl ="https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/orders.json?created_at_min=".$formatted;
  // Get cURL resource
	$curl = curl_init();
	// Set some options - we are passing in a useragent too here
	curl_setopt_array($curl, array(
	CURLOPT_RETURNTRANSFER => 1,
	CURLOPT_URL => 'https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@storename.myshopify.com/admin/orders.json?created_at_min='.$formatted,
	CURLOPT_USERAGENT => 'Codular Sample cURL Request'
	));
	// Send the request & save response to $resp
	$resp = curl_exec($curl);

$csv = "Email,Name,Date,Description,Order Ref,Product Search Code,Customer Ref,Amount,Currency,Tags,Merchant Identifier \n";//Column headers
	
	$response = json_decode($resp);
		$new=array();
		echo '<pre>';
	//print_r($response);
echo '</pre>';
 foreach($response as $res){
	echo '<pre>';
	print_r($res);
	echo '</pre>';
	 foreach($res as $ress){
/* echo "<pre>";
print_r($ress->line_items);
echo "</pre>";
*/
$newarr=$ress->line_items;

 foreach($ress as $resss){
 $customer_id = $resss->id;
 $customer_name = $resss->first_name.' '.$resss->last_name;
 
}
/*echo "<pre>";
print_r($newarr);
echo "</pre>";
*/
$a=array();
foreach($newarr as $newrr){
	array_push($a,$newrr->title);
	//echo $tgs.=$newrr->title;	
	//$get_tags .= implode(",",$newrr->title);
	
}
echo $comma_separated = implode(" ", $a);
$val="lorem lorem";

"Email,Name,Date,Description,Order Ref,Product Search Code,Customer Ref,Amount,Currency,Tags,Merchant Identifier \n";
if($ress->shipping_address->country=="United States"){
$csv.= $ress->email.','.$customer_name.','.$ress->created_at.','.$comma_separated.','.$ress->name.','.$comma_separated.','.$customer_id.','.$ress->total_price.','.$ress->currency.','.$ress->tags.','."cycology-clothing-usa"."\n";
}
 //Append data to csv
$file_name = date('m-d-Y').'-orders.csv';

$csv_handler = fopen ($file_name,'w');
fwrite ($csv_handler,$csv);
fclose ($csv_handler);
 }
	
 }
 echo 'Data saved to csvfile.csv';
	exit;
?>
------------------------------------------------------
______________________________________________________________________________________________
